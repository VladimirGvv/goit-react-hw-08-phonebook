{"version":3,"file":"static/js/881.695ed808.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/PhoneForm/PhoneForm.module.scss?e03d","components/PhoneForm/PhoneForm.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.scss?9b70","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.scss?573d","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PhoneForm_form__QQizJ\",\"input\":\"PhoneForm_input__A2DCa\",\"btn\":\"PhoneForm_btn__Bzp7d\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport styles from './PhoneForm.module.scss';\n\nexport function PhoneForm () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleChangeName = e => {\n    const { value, name } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.find(contact => contact.name === name)) {\n      return window.alert(`${name} is already in contacts.`);\n    }\n\n    dispatch(addContact({\n      id: nanoid(),\n      name: name,\n      number: number,\n    }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <label className={styles.label}>Name</label>\n        <input\n          value={name}\n          onChange={handleChangeName}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={styles.input}\n        />\n      <label className={styles.label}>Number</label>\n        <input\n          value={number}\n          onChange={handleChangeName}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className={styles.input}\n        />\n      <button className={styles.btn} type=\"submit\">\n        add contact\n      </button>\n    </form>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactsList_contacts__S-OHp\",\"contacts_item\":\"ContactsList_contacts_item__BYW+H\",\"btn\":\"ContactsList_btn__sfJ-X\"};","import styles from './ContactsList.module.scss';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const normalizeFilter = filter.toLocaleLowerCase();\n\n  const filterContacts = contacts.filter(contact => {\n    return contact.name.toLocaleLowerCase().includes(normalizeFilter);\n  });\n\n  return (\n    <div>\n      {filterContacts.map(contact => {\n        return (\n          <ol className={styles.contacts} key={nanoid()}>\n            <li key={nanoid()} className={styles.contacts_item}>\n              {contact.name}: {contact.number}\n            <button\n              type=\"button\"\n              className={styles.btn}\n              onClick={() => {\n                handleDeleteContact(contact.id);\n              }}\n            >\n              Delete\n              </button>\n            </li>\n          </ol>\n        );\n      })}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__S09D5\"};","import { useSelector, useDispatch} from 'react-redux';\nimport { filterSearch  } from 'redux/filter/filterSlice';\n\nimport styles from './Filter.module.scss';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filter.filter);\n\n  const handlerFilterChange = e => {\n    dispatch(filterSearch (e.currentTarget.value));\n  };\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={handlerFilterChange}\n        className={styles.input}\n      ></input>\n    </>\n  )\n  \n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { PhoneForm } from 'components/PhoneForm/PhoneForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && <Loader />}</div>\n      <PhoneForm />\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectFilter","filter","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","PhoneForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChangeName","e","currentTarget","value","reset","onSubmit","preventDefault","find","contact","window","alert","addContact","className","styles","onChange","type","pattern","title","required","ContactsList","normalizeFilter","toLocaleLowerCase","filterContacts","includes","map","onClick","deleteContact","Filter","filterSearch","Contacts","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}